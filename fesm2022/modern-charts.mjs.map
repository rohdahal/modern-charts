{"version":3,"file":"modern-charts.mjs","sources":["../../../projects/modern-charts/src/lib/core/theme.ts","../../../projects/modern-charts/src/lib/core/scales.ts","../../../projects/modern-charts/src/lib/core/chart-engine.ts","../../../projects/modern-charts/src/lib/core/registry.ts","../../../projects/modern-charts/src/lib/renderers/line-series.renderer.ts","../../../projects/modern-charts/src/lib/renderers/area-series.renderer.ts","../../../projects/modern-charts/src/lib/core/engine-factory.ts","../../../projects/modern-charts/src/lib/components/chart.component.ts","../../../projects/modern-charts/src/lib/provide-modern-charts.ts","../../../projects/modern-charts/src/modern-charts.ts"],"sourcesContent":["import { ChartTheme, ChartThemeOverrides } from './types';\n\nconst defaultPalette = [\n  '#2563eb',\n  '#7c3aed',\n  '#ea580c',\n  '#16a34a',\n  '#dc2626',\n  '#0891b2',\n];\n\nexport const DEFAULT_CHART_THEME: ChartTheme = {\n  background: '#ffffff',\n  palette: defaultPalette,\n  axis: {\n    color: '#6b7280',\n    labelColor: '#111827',\n    gridColor: 'rgba(107, 114, 128, 0.2)',\n    fontSize: 12,\n    fontFamily: 'Inter, system-ui, sans-serif',\n  },\n  legend: {\n    color: '#111827',\n    fontSize: 13,\n    fontFamily: 'Inter, system-ui, sans-serif',\n  },\n  series: {\n    strokeWidth: 2,\n    pointRadius: 3,\n    areaOpacity: 0.25,\n  },\n};\n\nexport function mergeTheme(overrides: ChartThemeOverrides | undefined): ChartTheme {\n  if (!overrides) {\n    return DEFAULT_CHART_THEME;\n  }\n\n  const axis = {\n    ...DEFAULT_CHART_THEME.axis,\n    ...overrides.axis,\n  } satisfies ChartTheme['axis'];\n\n  const legend = {\n    ...DEFAULT_CHART_THEME.legend,\n    ...overrides.legend,\n  } satisfies ChartTheme['legend'];\n\n  const series = {\n    ...DEFAULT_CHART_THEME.series,\n    ...overrides.series,\n  } satisfies ChartTheme['series'];\n\n  const background = overrides.background ?? DEFAULT_CHART_THEME.background;\n  const palette = overrides.palette ?? DEFAULT_CHART_THEME.palette;\n\n  return {\n    background,\n    palette,\n    axis,\n    legend,\n    series,\n  };\n}\n","export interface LinearScaleConfig {\n  domain: [number, number];\n  range: [number, number];\n  clamp?: boolean;\n}\n\nexport function createLinearScale({ domain, range, clamp = false }: LinearScaleConfig) {\n  const [d0, d1] = domain;\n  const [r0, r1] = range;\n  const domainSpan = d1 - d0 || 1;\n  const rangeSpan = r1 - r0;\n\n  return (value: number) => {\n    const t = (value - d0) / domainSpan;\n    const unclamped = r0 + t * rangeSpan;\n\n    if (!clamp) {\n      return unclamped;\n    }\n\n    if (rangeSpan >= 0) {\n      return Math.min(Math.max(unclamped, Math.min(r0, r1)), Math.max(r0, r1));\n    }\n\n    return Math.max(Math.min(unclamped, Math.max(r0, r1)), Math.min(r0, r1));\n  };\n}\n","import { mergeTheme } from './theme';\nimport { createLinearScale } from './scales';\nimport {\n  ChartConfig,\n  ChartRenderResult,\n  ChartSeries,\n  ChartTheme,\n  ChartThemeOverrides,\n  ResolvedChartLayout,\n  SeriesRenderContext,\n} from './types';\nimport { ChartRegistry } from './registry';\n\ninterface NormalizedSeries {\n  config: ChartSeries;\n  points: { x: number; y: number }[];\n  xDomain: [number, number];\n  yDomain: [number, number];\n}\n\nconst PADDING_DEFAULT = 32;\n\nexport class ChartEngine {\n  private theme: ChartTheme;\n\n  constructor(private readonly registry: ChartRegistry) {\n    this.theme = mergeTheme(undefined);\n  }\n\n  setTheme(theme: ChartThemeOverrides | undefined): void {\n    this.theme = mergeTheme(theme);\n  }\n\n  render(canvas: HTMLCanvasElement, config: ChartConfig): ChartRenderResult | undefined {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Canvas 2D context is not available.');\n    }\n\n    this.setTheme(config.theme);\n\n    const layout = this.resolveLayout(canvas, config);\n    this.prepareCanvas(canvas, ctx, layout);\n\n    const normalizedSeries = config.data.series\n      .map((series) => this.normalizeSeries(series))\n      .filter((serie): serie is NormalizedSeries => !!serie);\n\n    if (!normalizedSeries.length) {\n      return;\n    }\n\n    const xDomain = this.combineDomain(normalizedSeries.map((serie) => serie.xDomain));\n    const yDomain = this.combineDomain(normalizedSeries.map((serie) => serie.yDomain));\n\n    const xScale = createLinearScale({ domain: xDomain, range: [layout.padding.left, layout.width - layout.padding.right] });\n    const yScale = createLinearScale({ domain: yDomain, range: [layout.height - layout.padding.bottom, layout.padding.top] });\n\n    ctx.fillStyle = this.theme.background;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    this.drawGrid(ctx, layout, xDomain, yDomain);\n\n    const pointMeta = new Array<{ canvasX: number; canvasY: number; seriesIndex: number; pointIndex: number; series: ChartSeries; value: { x: number; y: number } }>();\n\n    normalizedSeries.forEach((serie, index) => {\n      const renderer = this.registry.getSeriesRenderer(serie.config.type);\n\n      if (!renderer) {\n        console.warn(`No renderer registered for series type \"${serie.config.type}\".`);\n        return;\n      }\n\n      const renderContext: SeriesRenderContext = {\n        ctx,\n        config,\n        theme: this.theme,\n        layout,\n        series: {\n          color: this.theme.palette[index % this.theme.palette.length],\n          ...serie.config,\n        },\n        points: serie.points,\n        seriesIndex: index,\n        xScale: (value: number) => xScale(value),\n        yScale: (value: number) => yScale(value),\n      };\n\n      renderer.render(renderContext);\n\n      serie.points.forEach((point, pointIndex) => {\n        pointMeta.push({\n          seriesIndex: index,\n          pointIndex,\n          value: point,\n          canvasX: xScale(point.x),\n          canvasY: yScale(point.y),\n          series: renderContext.series,\n        });\n      });\n    });\n\n    this.drawAxes(ctx, layout, xDomain, yDomain, config);\n\n    return {\n      layout,\n      theme: this.theme,\n      config,\n      points: pointMeta,\n    };\n  }\n\n  private prepareCanvas(\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    layout: ResolvedChartLayout,\n  ): void {\n    const dpr = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;\n    canvas.width = layout.width * dpr;\n    canvas.height = layout.height * dpr;\n    canvas.style.width = `${layout.width}px`;\n    canvas.style.height = `${layout.height}px`;\n    ctx.scale(dpr, dpr);\n  }\n\n  private resolveLayout(canvas: HTMLCanvasElement, config: ChartConfig): ResolvedChartLayout {\n    const rect = canvas.getBoundingClientRect();\n    const layoutConfig = config.layout ?? {};\n\n    const width = Math.floor(layoutConfig.autoFit ? rect.width : rect.width || canvas.width || 640);\n    const height = Math.floor(layoutConfig.autoFit ? rect.height : rect.height || canvas.height || 360);\n\n    const paddingValue = layoutConfig.padding ?? PADDING_DEFAULT;\n    const padding = typeof paddingValue === 'number'\n      ? { top: paddingValue, right: paddingValue, bottom: paddingValue, left: paddingValue }\n      : {\n        top: paddingValue.top ?? PADDING_DEFAULT,\n        right: paddingValue.right ?? PADDING_DEFAULT,\n        bottom: paddingValue.bottom ?? PADDING_DEFAULT,\n        left: paddingValue.left ?? PADDING_DEFAULT,\n      };\n\n    return { width, height, padding };\n  }\n\n  private normalizeSeries(series: ChartSeries): NormalizedSeries | undefined {\n    const points = series.data.map((value, index) => {\n      if (Array.isArray(value)) {\n        return { x: value[0], y: value[1] };\n      }\n\n      if (typeof value === 'number') {\n        return { x: index, y: value };\n      }\n\n      return value;\n    }).filter((point): point is { x: number; y: number } => point != null && !Number.isNaN(point.x) && !Number.isNaN(point.y));\n\n    if (!points.length) {\n      return undefined;\n    }\n\n    const xValues = points.map((point) => point.x);\n    const yValues = points.map((point) => point.y);\n\n    const xDomain: [number, number] = [Math.min(...xValues), Math.max(...xValues)];\n    const yDomain: [number, number] = [Math.min(...yValues), Math.max(...yValues)];\n\n    if (yDomain[0] === yDomain[1]) {\n      const padding = Math.abs(yDomain[0]) * 0.05 || 1;\n      yDomain[0] -= padding;\n      yDomain[1] += padding;\n    }\n\n    if (xDomain[0] === xDomain[1]) {\n      xDomain[0] -= 1;\n      xDomain[1] += 1;\n    }\n\n    return { config: series, points, xDomain, yDomain };\n  }\n\n  private combineDomain(domains: Array<[number, number]>): [number, number] {\n    const min = Math.min(...domains.map(([start]) => start));\n    const max = Math.max(...domains.map(([, end]) => end));\n    return [min, max];\n  }\n\n  private drawAxes(\n    ctx: CanvasRenderingContext2D,\n    layout: ResolvedChartLayout,\n    xDomain: [number, number],\n    yDomain: [number, number],\n    config: ChartConfig,\n  ): void {\n    const { padding } = layout;\n    const theme = this.theme;\n\n    ctx.save();\n    ctx.strokeStyle = theme.axis.color;\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(padding.left, layout.height - padding.bottom);\n    ctx.lineTo(layout.width - padding.right, layout.height - padding.bottom);\n    ctx.moveTo(padding.left, layout.height - padding.bottom);\n    ctx.lineTo(padding.left, padding.top);\n    ctx.stroke();\n\n    const xTickCount = config.axes?.find((axis) => axis.position === 'bottom')?.tickCount ?? 5;\n    const yTickCount = config.axes?.find((axis) => axis.position === 'left')?.tickCount ?? 5;\n\n    const xScale = createLinearScale({ domain: xDomain, range: [padding.left, layout.width - padding.right] });\n    const yScale = createLinearScale({ domain: yDomain, range: [layout.height - padding.bottom, padding.top] });\n\n    ctx.fillStyle = theme.axis.labelColor;\n    ctx.font = `${theme.axis.fontSize}px ${theme.axis.fontFamily}`;\n    ctx.textAlign = 'center';\n\n    for (let i = 0; i <= xTickCount; i += 1) {\n      const t = i / xTickCount;\n      const value = xDomain[0] + t * (xDomain[1] - xDomain[0]);\n      const x = xScale(value);\n      ctx.beginPath();\n      ctx.moveTo(x, layout.height - padding.bottom);\n      ctx.lineTo(x, layout.height - padding.bottom + 4);\n      ctx.stroke();\n\n      ctx.fillText(this.formatAxisValue(value, 'x', config), x, layout.height - padding.bottom + 16);\n    }\n\n    ctx.textAlign = 'right';\n\n    for (let i = 0; i <= yTickCount; i += 1) {\n      const t = i / yTickCount;\n      const value = yDomain[0] + t * (yDomain[1] - yDomain[0]);\n      const y = yScale(value);\n      ctx.beginPath();\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(padding.left - 4, y);\n      ctx.stroke();\n\n      ctx.fillText(this.formatAxisValue(value, 'y', config), padding.left - 8, y + 3);\n    }\n\n    ctx.restore();\n  }\n\n  private drawGrid(\n    ctx: CanvasRenderingContext2D,\n    layout: ResolvedChartLayout,\n    xDomain: [number, number],\n    yDomain: [number, number],\n  ): void {\n    const { padding } = layout;\n    const theme = this.theme;\n    ctx.save();\n    ctx.strokeStyle = theme.axis.gridColor;\n    ctx.lineWidth = 1;\n    ctx.setLineDash([3, 4]);\n\n    const gridLines = 5;\n    const xScale = createLinearScale({ domain: xDomain, range: [padding.left, layout.width - padding.right] });\n    const yScale = createLinearScale({ domain: yDomain, range: [layout.height - padding.bottom, padding.top] });\n\n    for (let i = 1; i < gridLines; i += 1) {\n      const t = i / gridLines;\n      const x = padding.left + t * (layout.width - padding.left - padding.right);\n      ctx.beginPath();\n      ctx.moveTo(x, padding.top);\n      ctx.lineTo(x, layout.height - padding.bottom);\n      ctx.stroke();\n    }\n\n    for (let i = 1; i < gridLines; i += 1) {\n      const value = yDomain[0] + (i / gridLines) * (yDomain[1] - yDomain[0]);\n      const y = yScale(value);\n      ctx.beginPath();\n      ctx.moveTo(padding.left, y);\n      ctx.lineTo(layout.width - padding.right, y);\n      ctx.stroke();\n    }\n\n    ctx.setLineDash([]);\n    ctx.restore();\n  }\n\n  private formatAxisValue(value: number, axis: 'x' | 'y', config: ChartConfig): string {\n    const axisConfig = config.axes?.find((candidate) =>\n      axis === 'x' ? candidate.position === 'bottom' : candidate.position === 'left');\n\n    if (axisConfig?.formatter) {\n      return axisConfig.formatter(value);\n    }\n\n    const digits = Math.abs(value) >= 1000 ? 0 : 2;\n    return value.toFixed(digits);\n  }\n}\n","import { ChartSeriesRenderer, ChartSeriesType } from './types';\n\nexport class ChartRegistry {\n  private readonly seriesRenderers = new Map<ChartSeriesType, ChartSeriesRenderer>();\n\n  registerSeriesRenderer(renderer: ChartSeriesRenderer): void {\n    this.seriesRenderers.set(renderer.type, renderer);\n  }\n\n  getSeriesRenderer(type: ChartSeriesType): ChartSeriesRenderer | undefined {\n    return this.seriesRenderers.get(type);\n  }\n\n  getRegisteredTypes(): ChartSeriesType[] {\n    return Array.from(this.seriesRenderers.keys());\n  }\n}\n","import { ChartSeriesRenderer, SeriesRenderContext } from '../core/types';\n\nexport class LineSeriesRenderer implements ChartSeriesRenderer {\n  readonly type = 'line' as const;\n\n  render({ ctx, series, points, xScale, yScale, theme }: SeriesRenderContext): void {\n    if (!points.length) {\n      return;\n    }\n\n    const strokeWidth = series.strokeWidth ?? theme.series.strokeWidth;\n    const color = series.color ?? theme.palette[0];\n\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = strokeWidth;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n\n    points.forEach((point, index) => {\n      const x = xScale(point.x);\n      const y = yScale(point.y);\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    ctx.stroke();\n\n    const pointRadius = theme.series.pointRadius;\n    if (pointRadius > 0) {\n      ctx.fillStyle = color;\n      points.forEach((point) => {\n        const x = xScale(point.x);\n        const y = yScale(point.y);\n        ctx.beginPath();\n        ctx.arc(x, y, pointRadius, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    }\n\n    ctx.restore();\n  }\n}\n","import { ChartSeriesRenderer, SeriesRenderContext } from '../core/types';\n\nexport class AreaSeriesRenderer implements ChartSeriesRenderer {\n  readonly type = 'area' as const;\n\n  render({ ctx, series, points, xScale, yScale, theme, layout }: SeriesRenderContext): void {\n    if (!points.length) {\n      return;\n    }\n\n    const color = series.color ?? theme.palette[0];\n    const opacity = series.fillOpacity ?? theme.series.areaOpacity;\n\n    ctx.save();\n    ctx.fillStyle = this.applyAlpha(color, opacity);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = series.strokeWidth ?? theme.series.strokeWidth;\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n\n    ctx.beginPath();\n\n    points.forEach((point, index) => {\n      const x = xScale(point.x);\n      const y = yScale(point.y);\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    const lastPointIndex = points.length - 1;\n    const firstX = xScale(points[0].x);\n    const baselineY = layout.height - layout.padding.bottom;\n    ctx.lineTo(xScale(points[lastPointIndex].x), baselineY);\n    ctx.lineTo(firstX, baselineY);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.beginPath();\n    points.forEach((point, index) => {\n      const x = xScale(point.x);\n      const y = yScale(point.y);\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  private applyAlpha(hex: string, alpha: number): string {\n    if (hex.startsWith('#') && (hex.length === 7 || hex.length === 4)) {\n      const normalized = hex.length === 4\n        ? `#${hex[1]}${hex[1]}${hex[2]}${hex[2]}${hex[3]}${hex[3]}`\n        : hex;\n      const [, r, g, b] = normalized.match(/#(..)(..)(..)/)!;\n      const rDec = parseInt(r, 16);\n      const gDec = parseInt(g, 16);\n      const bDec = parseInt(b, 16);\n      return `rgba(${rDec}, ${gDec}, ${bDec}, ${Math.min(Math.max(alpha, 0), 1)})`;\n    }\n\n    return hex;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ChartEngine } from './chart-engine';\nimport { ChartRegistry } from './registry';\nimport { ChartSeriesRenderer } from './types';\nimport { LineSeriesRenderer } from '../renderers/line-series.renderer';\nimport { AreaSeriesRenderer } from '../renderers/area-series.renderer';\n\n@Injectable({ providedIn: 'root' })\nexport class ChartEngineFactory {\n  private readonly registry = new ChartRegistry();\n  private defaultsRegistered = false;\n\n  registerSeriesRenderer(renderer: ChartSeriesRenderer): void {\n    this.registry.registerSeriesRenderer(renderer);\n  }\n\n  create(): ChartEngine {\n    this.ensureDefaultRenderers();\n    return new ChartEngine(this.registry);\n  }\n\n  private ensureDefaultRenderers(): void {\n    if (this.defaultsRegistered) {\n      return;\n    }\n\n    this.registerSeriesRenderer(new LineSeriesRenderer());\n    this.registerSeriesRenderer(new AreaSeriesRenderer());\n\n    this.defaultsRegistered = true;\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { ChartConfig, ChartRenderResult } from '../core/types';\nimport { ChartEngineFactory } from '../core/engine-factory';\nimport { ChartEngine } from '../core/chart-engine';\nimport { PLATFORM_ID } from '@angular/core';\n\n@Component({\n  selector: 'mc-chart',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"mc-chart\" #wrapper>\n      <canvas\n        #canvas\n        (pointermove)=\"handlePointer($event)\"\n        (pointerleave)=\"clearPointerState()\"\n        (pointercancel)=\"clearPointerState()\"\n      ></canvas>\n      <div class=\"mc-chart__overlay\" *ngIf=\"overlayVisible\">\n        <div\n          *ngIf=\"crosshairState\"\n          class=\"mc-chart__crosshair mc-chart__crosshair--x\"\n          [style.left.px]=\"crosshairState.x\"\n        ></div>\n        <div\n          *ngIf=\"crosshairState\"\n          class=\"mc-chart__crosshair mc-chart__crosshair--y\"\n          [style.top.px]=\"crosshairState.y\"\n        ></div>\n        <div\n          *ngIf=\"tooltipState\"\n          class=\"mc-chart__dot\"\n          [style.left.px]=\"tooltipState.x\"\n          [style.top.px]=\"tooltipState.y\"\n          [style.border-color]=\"tooltipState.color\"\n          [style.background]=\"tooltipState.dotFill\"\n        ></div>\n        <div\n          *ngIf=\"tooltipState\"\n          class=\"mc-chart__tooltip\"\n          [style.left.px]=\"tooltipState.left\"\n          [style.top.px]=\"tooltipState.top\"\n        >\n          <div class=\"mc-chart__tooltip-series\">\n            <span class=\"mc-chart__swatch\" [style.background]=\"tooltipState.color\"></span>\n            <span>{{ tooltipState.seriesName || 'Series' }}</span>\n          </div>\n          <div class=\"mc-chart__tooltip-metric\">\n            <span class=\"mc-chart__tooltip-label\">{{ tooltipState.label }}</span>\n            <span class=\"mc-chart__tooltip-value\">{{ tooltipState.value }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: `\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n      min-height: 240px;\n    }\n\n    .mc-chart {\n      position: relative;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n    }\n\n    canvas {\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n\n    .mc-chart__overlay {\n      pointer-events: none;\n      position: absolute;\n      inset: 0;\n      font-family: inherit;\n    }\n\n    .mc-chart__crosshair {\n      position: absolute;\n      background: rgba(37, 99, 235, 0.3);\n      backdrop-filter: blur(1px);\n    }\n\n    .mc-chart__crosshair--x {\n      top: 0;\n      bottom: 0;\n      width: 1px;\n      transform: translateX(-0.5px);\n    }\n\n    .mc-chart__crosshair--y {\n      left: 0;\n      right: 0;\n      height: 1px;\n      transform: translateY(-0.5px);\n    }\n\n    .mc-chart__dot {\n      position: absolute;\n      width: 12px;\n      height: 12px;\n      border-radius: 999px;\n      border: 2px solid;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 4px 16px rgba(15, 23, 42, 0.35);\n    }\n\n    .mc-chart__tooltip {\n      position: absolute;\n      min-width: 160px;\n      max-width: 220px;\n      padding: 0.75rem 0.9rem;\n      border-radius: 0.9rem;\n      background: rgba(15, 23, 42, 0.92);\n      color: #f8fafc;\n      box-shadow: 0 12px 35px rgba(15, 23, 42, 0.4);\n      transform: translate(-50%, -110%);\n      will-change: transform;\n      display: flex;\n      flex-direction: column;\n      gap: 0.45rem;\n    }\n\n    .mc-chart__tooltip-series {\n      display: flex;\n      gap: 0.5rem;\n      align-items: center;\n      font-size: 0.8rem;\n      letter-spacing: 0.04em;\n      text-transform: uppercase;\n      opacity: 0.8;\n    }\n\n    .mc-chart__swatch {\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n      display: inline-block;\n    }\n\n    .mc-chart__tooltip-metric {\n      display: flex;\n      flex-direction: column;\n      gap: 0.15rem;\n    }\n\n    .mc-chart__tooltip-label {\n      font-size: 0.75rem;\n      text-transform: uppercase;\n      letter-spacing: 0.05em;\n      color: rgba(248, 250, 252, 0.65);\n    }\n\n    .mc-chart__tooltip-value {\n      font-size: 1.25rem;\n      font-weight: 600;\n      letter-spacing: -0.02em;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChartComponent implements AfterViewInit, OnChanges, OnDestroy {\n  private readonly platformId = inject(PLATFORM_ID);\n  private readonly engineFactory = inject(ChartEngineFactory);\n  private readonly cdr = inject(ChangeDetectorRef);\n  private resizeObserver?: ResizeObserver;\n  private engine?: ChartEngine;\n  private renderState?: ChartRenderResult;\n\n  @Input({ required: true })\n  config!: ChartConfig;\n\n  @ViewChild('canvas', { static: true })\n  private canvasRef!: ElementRef<HTMLCanvasElement>;\n\n  @ViewChild('wrapper', { static: true })\n  private wrapperRef!: ElementRef<HTMLElement>;\n\n  ngAfterViewInit(): void {\n    if (!this.isBrowser()) {\n      return;\n    }\n\n    this.engine = this.engineFactory.create();\n    this.render();\n\n    if (typeof ResizeObserver !== 'undefined') {\n      this.resizeObserver = new ResizeObserver(() => this.render());\n      this.resizeObserver.observe(this.wrapperRef.nativeElement);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['config'] && !changes['config'].isFirstChange()) {\n      this.render();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.resizeObserver?.disconnect();\n  }\n\n  private render(): void {\n    if (!this.engine || !this.canvasRef || !this.config) {\n      return;\n    }\n\n    this.renderState = undefined;\n    this.clearPointerState(false);\n\n    queueMicrotask(() => {\n      if (!this.engine) {\n        return;\n      }\n\n      const result = this.engine.render(this.canvasRef.nativeElement, this.config);\n      this.renderState = result;\n      this.cdr.markForCheck();\n    });\n  }\n\n  private isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  protected get overlayVisible(): boolean {\n    return !!(this.tooltipState || this.crosshairState);\n  }\n\n  protected tooltipState?: {\n    x: number;\n    y: number;\n    left: number;\n    top: number;\n    label: string;\n    value: string;\n    seriesName?: string;\n    color: string;\n    dotFill: string;\n  };\n\n  protected crosshairState?: { x: number; y: number };\n\n  handlePointer(event: PointerEvent): void {\n    const renderState = this.renderState;\n    if (!renderState) {\n      return;\n    }\n\n    const tooltipEnabled = this.isInteractionEnabled('tooltip');\n    const crosshairEnabled = this.isInteractionEnabled('crosshair');\n\n    if (!tooltipEnabled && !crosshairEnabled) {\n      return;\n    }\n\n    const rect = this.wrapperRef.nativeElement.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    const nearest = this.getNearestPoint(renderState, x, y);\n\n    if (!nearest) {\n      this.clearPointerState();\n      return;\n    }\n\n    if (crosshairEnabled) {\n      this.crosshairState = { x: nearest.canvasX, y: nearest.canvasY };\n    } else {\n      this.crosshairState = undefined;\n    }\n\n    if (tooltipEnabled) {\n      this.tooltipState = this.buildTooltipState(renderState, nearest, rect.width, rect.height);\n    } else {\n      this.tooltipState = undefined;\n    }\n\n    this.cdr.markForCheck();\n  }\n\n  clearPointerState(mark = true): void {\n    this.tooltipState = undefined;\n    this.crosshairState = undefined;\n    if (mark) {\n      this.cdr.markForCheck();\n    }\n  }\n\n  private isInteractionEnabled(key: keyof NonNullable<ChartConfig['interactions']>): boolean {\n    return !!this.config?.interactions?.[key];\n  }\n\n  private getNearestPoint(state: ChartRenderResult, x: number, y: number) {\n    const threshold = 32;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let candidate: typeof state.points[number] | undefined;\n\n    for (const point of state.points) {\n      const dx = point.canvasX - x;\n      const dy = point.canvasY - y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance < minDistance) {\n        minDistance = distance;\n        candidate = point;\n      }\n    }\n\n    if (!candidate || minDistance > threshold) {\n      return undefined;\n    }\n\n    return candidate;\n  }\n\n  private buildTooltipState(state: ChartRenderResult, point: ChartRenderResult['points'][number], width: number, height: number) {\n    const label = this.getLabelForPoint(state, point);\n    const value = this.formatValue(point.value.y);\n    const palette = state.theme.palette;\n    const paletteColor = palette[point.seriesIndex % palette.length] ?? '#2563eb';\n    const color = point.series.color ?? paletteColor;\n    const left = this.clamp(point.canvasX + 16, 12, width - 12);\n    const top = this.clamp(point.canvasY - 16, 12, height - 12);\n\n    return {\n      x: point.canvasX,\n      y: point.canvasY,\n      left,\n      top,\n      label,\n      value,\n      seriesName: point.series.name,\n      color,\n      dotFill: this.applyAlpha(color, 0.15),\n    };\n  }\n\n  private getLabelForPoint(state: ChartRenderResult, point: ChartRenderResult['points'][number]): string {\n    const labels = state.config.data.labels;\n    if (labels && labels[point.pointIndex] != null) {\n      return String(labels[point.pointIndex]);\n    }\n\n    return this.formatValue(point.value.x);\n  }\n\n  private formatValue(value: number): string {\n    if (Math.abs(value) >= 1000) {\n      const suffixes = ['k', 'M', 'B'];\n      let base = Math.abs(value);\n      let index = -1;\n      while (base >= 1000 && index < suffixes.length - 1) {\n        base /= 1000;\n        index += 1;\n      }\n      const formatted = `${value < 0 ? '-' : ''}${base.toFixed(base < 10 ? 1 : 0)}${suffixes[index] ?? ''}`;\n      return formatted;\n    }\n\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n\n    return value.toFixed(2);\n  }\n\n  private clamp(value: number, min: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  private applyAlpha(color: string, alpha: number): string {\n    if (!color.startsWith('#')) {\n      return color;\n    }\n\n    const normalized = color.length === 4\n      ? `#${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`\n      : color;\n    const [, r, g, b] = normalized.match(/#(..)(..)(..)/)!;\n    const rDec = parseInt(r, 16);\n    const gDec = parseInt(g, 16);\n    const bDec = parseInt(b, 16);\n    return `rgba(${rDec}, ${gDec}, ${bDec}, ${alpha})`;\n  }\n}\n","import { ENVIRONMENT_INITIALIZER, Injector, Provider, inject } from '@angular/core';\nimport { ChartSeriesRenderer } from './core/types';\nimport { ChartEngineFactory } from './core/engine-factory';\n\nexport interface ModernChartsOptions {\n  seriesRenderers?: ChartSeriesRenderer[];\n}\n\nexport function provideModernCharts(options: ModernChartsOptions = {}): Provider[] {\n  const { seriesRenderers = [] } = options;\n\n  return [\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const injector = inject(Injector);\n        return () => {\n          const factory = injector.get(ChartEngineFactory);\n          seriesRenderers.forEach((renderer) => factory.registerSeriesRenderer(renderer));\n        };\n      },\n    },\n  ];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}